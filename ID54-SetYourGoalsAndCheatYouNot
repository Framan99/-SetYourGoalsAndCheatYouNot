# ID54-SetYourGoalsAndCheatYouNot

import pandas as pd
import numpy as np
data = pd.read_csv("Goals.csv", sep = ';', index_col=0)
columns = data.columns #salavtaggio vettore con nomi colonne
data.info()
data.shape
data.isna().sum() #numero totale di dati mananti (NaN) per ogni variabile

data_num= pd.read_csv("Goal_numerical_values.csv", sep = ';', header=0)
columns_num = data_num.columns
data_num.info()
data_num.shape

data.describe()
data_num.describe()

data["Sesso"].value_counts()
data["Laurea in"].value_counts()
data["Anno"].value_counts()
data.groupby("Laurea in").mean()
data.groupby("EtÃ ").mean()
data.boxplot()
data.hist()
data_num.boxplot()
data_num.hist()
data_num.mean()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler().fit(data_num)
print(scaler)

scaler.mean_
scaler.scale_

scaled_data = scaler.transform(data_num)
scaled_df = pd.DataFrame(scaled_data) 
scaled_df.columns = columns_num

scaled_df.boxplot() 

from sklearn.preprocessing import MinMaxScaler
mm_scaler =  MinMaxScaler(copy=False,feature_range=(-1, 1))
mm_scaler.fit_transform(scaled_df)

scaled_df.boxplot()
scaled_df.hist()

values = {'Voto Laurea Triennale': 98.897959} 
data_num = data_num.fillna(value=values)
values = {'Spartan': 1} #0.878049
data_num = data_num.fillna(value=values)
values = {'Media': 25.704592} 
data_num = data_num.fillna(value=values)
values = {'CFU': 91.867347} 
data_num = data_num.fillna(value=values)
values = {'Media (Feb - Plan)': 25.835229599999995} 
data_num = data_num.fillna(value=values)
values = {'CFU.1': 21.038183680000003} 
data_num = data_num.fillna(value=values)
values = {'Media (Feb - Real)': 25.854661280000013} 
data_num = data_num.fillna(value=values)
values = {'CFU.2': 23.92365312000001} 
data_num = data_num.fillna(value=values)
values = {'Media (lug)': 25.933005120000008} 
data_num = data_num.fillna(value=values)
values = {'CFU.3': 27.260459200000003} 
data_num = data_num.fillna(value=values)
values = {'Media (Set)': 25.526663360000022} 
data_num = data_num.fillna(value=values)
values = {'CFU.4': 19.21161744000002} 
data_num = data_num.fillna(value=values)
values = {'Media min': 25.22587552} 
data_num = data_num.fillna(value=values)
values = {'CFU min': 44.26227552} 
data_num = data_num.fillna(value=values)
values = {'Media Max': 26.675675519999995} 
data_num = data_num.fillna(value=values)
values = {'CFU Max': 51.972275520000004} 
data_num = data_num.fillna(value=values)
values = {'Musica': 1.5681836800000002} 
data_num = data_num.fillna(value=values)
values = {'Pitch&Talk': 1.9181836799999998} 
data_num = data_num.fillna(value=values)
values = {'Expect the Unexpected': 0} 
data_num = data_num.fillna(value=values)
values = {'CreativitÃ ': 1.7881836800000002} 
data_num = data_num.fillna(value=values)
values = {'SPEAR': 1.55113776} 
data_num = data_num.fillna(value=values)
values = {'NSW': 1.75818368} 
data_num = data_num.fillna(value=values)

data_num.isna().any()

from sklearn.preprocessing import StandardScaler 
scaler = StandardScaler(copy=False)
scaler.fit(data_num.astype(float)) 
scaler.transform(data_num.astype(float))
data_num.boxplot()

data_scaled=pd.DataFrame(scaler.transform(data_num.astype(float))) 
data_scaled.columns=data_num.columns
data_scaled.head()

from sklearn.decomposition import PCA
pca2 = PCA()
pca2.fit(data_scaled)

data_pca = pd.DataFrame(pca2.transform(data_scaled)) 
data_pca 

pd.DataFrame(pca2.explained_variance_).transpose()

explained_var=pd.DataFrame(pca2.explained_variance_ratio_).transpose()
explained_var

cum_explained_var=np.cumsum(pca2.explained_variance_ratio_) 
pd.DataFrame(cum_explained_var).transpose()

get_ipython().run_line_magic('matplotlib', 'inline')
import seaborn as sns
ax = sns.barplot(data=explained_var)

pd.DataFrame(pca2.components_)

data_pca.columns = ['PC1','PC2','3','4','5','6','7','8','9'',10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','27','28','29','30']

p1=sns.scatterplot(x="PC1", y="PC2", 
                   alpha=.3, 
                   hue="5", legend=False, 
                   data=data_pca);
for line in range(0,data_pca.shape[0]):
     p1.text(data_pca.PC1[line], data_pca.PC2[line], line, horizontalalignment='left', size='medium', color='black')

data_num = data_num.astype(float)
data_num

y = data_num.iloc[:,4]
y.head()

w = pd.DataFrame(data_num.iloc[:,:3])
w
#column_names = list(x) 

z = pd.DataFrame(data_num.iloc[:,-26:-1])
z

x = pd.concat([w,z], axis=1)
x

from sklearn.model_selection import train_test_split

#SPLIT DATA INTO TRAIN AND TEST SET
x_train, x_test, y_train, y_test = train_test_split(x, y, 
                                                    test_size =0.30, #by default is 75%-25%
                                                    #shuffle is set True by default,
                                                    stratify=y,
                                                    random_state= 123) #fix random seed for replicability

print(x_train.shape)
print(x_test.shape)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(x_train, y_train)
y_pred=model.predict(x_test)

from sklearn.metrics import f1_score
print('***RESULT ON TEST SET***')
print("f1_score: ", f1_score(y_test, y_pred))

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test, y_pred))

get_ipython().run_line_magic('matplotlib', 'inline')
import seaborn as sns
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap="Blues")

from sklearn import metrics

y_probs = model.predict_proba(x_test) #predict_proba gives the probabilities for the target (0 and 1 in your case) 

fpr, tpr, thresholds=metrics.roc_curve(y_test,  y_probs[:,1])

import matplotlib.pyplot as plt
plt.plot(fpr, tpr, label='ROC')
plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend()
plt.show()

auc = metrics.roc_auc_score(y_test, y_probs[:,1])
print('AUC: %.2f' % auc)

crossfit = data_num.groupby("CrossFit").mean()
crossfit=np.transpose(crossfit)
crossfit

triennale = data_num.groupby("Voto Laurea Triennale").mean()
triennale = np.transpose(triennale)
triennale.columns

triennale_110 = triennale.iloc[:,-1]
triennale_110
plan = data_num.groupby("Media (Feb - Plan)").mean()
plan_real = plan.loc[:,"Media (Feb - Real)"]
plan_real #left = Plan , right = Real

plan = data_num.groupby("Media (Feb - Plan)").mean()
plan_real = plan.loc[:,"Media (Feb - Real)"]
plan_crossfit = plan.loc[:,"CrossFit"]
plan_real_crossfit = pd.concat([plan_real, plan_crossfit], axis=1)
plan_real_crossfit

plan = data_num.groupby("Media (Feb - Plan)").mean()
plan_real = plan.loc[:,"Media (Feb - Real)"]
plan_eu = plan.loc[:,"Expect the Unexpected"]
plan_real_eu = pd.concat([plan_real, plan_eu], axis=1)
plan_real_eu

df_1=data_num[data_num['Sesso']==1] # records wih target==0
df_2=data_num[data_num['Sesso']==2] # records wih target==1

df_1=data_num[data_num['Sesso']==1] # records wih target==0
df_2=data_num[data_num['Sesso']==2] # records wih target==1


fig, axes = plt.subplots(3, 10,figsize=[20,5])
axes = axes.flatten()
fig.tight_layout(pad=2)

i=0
for x in data_num.columns:
    plt.sca(axes[i]) # set the current Axes
    plt.hist([df_1[x],df_2[x]],density=True)
    plt.title(x)
    i+=1
plt.show()

data_num_hist=data_num.hist(layout=(5,6), figsize=(15,12))

get_ipython().run_line_magic('matplotlib', 'inline')
import seaborn as sns
import matplotlib.pyplot as plt


X0 = data_num[data_num['Sesso']==1]
X1 = data_num[data_num['Sesso']==2]

fig, axes = plt.subplots(ncols=5, nrows=6, figsize=(15,15))
fig.tight_layout()

for i, ax in zip(range(data_num.columns.size), axes.flat):
    sns.histplot(X0.iloc[:,i], color="blue", ax=ax, stat='density', element="step",  alpha=0.3)
    sns.histplot(X1.iloc[:,i], color="red", ax=ax,stat='density', element="step",  alpha=0.3)
plt.show()

get_ipython().run_line_magic('matplotlib', 'inline')
import seaborn as sns
import matplotlib.pyplot as plt


X0 = data_num[data_num['Musica']==0]
X1 = data_num[data_num['Musica']==1]

fig, axes = plt.subplots(ncols=5, nrows=6, figsize=(15,15))
fig.tight_layout()

for i, ax in zip(range(data_num.columns.size), axes.flat):
    sns.histplot(X0.iloc[:,i], color="blue", ax=ax, stat='density', element="step",  alpha=0.3)
    sns.histplot(X1.iloc[:,i], color="red", ax=ax,stat='density', element="step",  alpha=0.3)
plt.show()

get_ipython().run_line_magic('matplotlib', 'inline')
import seaborn as sns
import matplotlib.pyplot as plt


X0 = data_num[data_num['NSW']==0]
X1 = data_num[data_num['NSW']==1]

fig, axes = plt.subplots(ncols=5, nrows=6, figsize=(15,15))
fig.tight_layout()

for i, ax in zip(range(data_num.columns.size), axes.flat):
    sns.histplot(X0.iloc[:,i], color="blue", ax=ax, stat='density', element="step",  alpha=0.3)
    sns.histplot(X1.iloc[:,i], color="red", ax=ax,stat='density', element="step",  alpha=0.3)
plt.show()

over_100 = data_num[data_num['Voto Laurea Triennale']>=100]
under_100 = data_num[data_num['Voto Laurea Triennale']<100]

get_ipython().run_line_magic('matplotlib', 'inline')
import seaborn as sns
import matplotlib.pyplot as plt


X0 = over_100
X1 = under_100

fig, axes = plt.subplots(ncols=5, nrows=6, figsize=(15,15))
fig.tight_layout()

for i, ax in zip(range(data_num.columns.size), axes.flat):
    sns.histplot(X0.iloc[:,i], color="blue", ax=ax, stat='density', element="step",  alpha=0.3)
    sns.histplot(X1.iloc[:,i], color="red", ax=ax,stat='density', element="step",  alpha=0.3)
plt.show()

